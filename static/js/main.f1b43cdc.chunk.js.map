{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","onHandleChange","type","onChange","App","handleChange","e","setState","searchText","target","value","state","fetch","then","data","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCPXC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GACnB,OAAO,cAAC,EAAD,CAAMC,GAAID,EAAQC,GAAID,QAASA,UCLjCO,G,MAAY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6CDG,E,kDAhDb,aAAe,IAAD,8BACZ,gBAiBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAKZC,WAAYF,EAAEG,OAAOC,SAtBvB,EAAKC,MAAQ,CACXd,SAAU,IAHA,E,gEAOO,IAAD,OAClBe,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZV,SAAUmB,EACVR,WAAY,U,+BAeX,MAG0BS,KAAKN,MAA9Bd,EAHD,EAGCA,SAAUW,EAHX,EAGWA,WACZU,EAAmBrB,EAASsB,QAAO,SAAC3B,GACxC,OAAOA,EAAQE,KAAK0B,cAAcC,SAASb,EAAWY,kBAExD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,eAAgBgB,KAAKZ,eAEvB,cAAC,EAAD,CAAUR,SAAUqB,W,GA3CVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f1b43cdc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monsters\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => {\n        return <Card id={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, onHandleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={onHandleChange}\n    />\n  );\n};\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.components\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((data) => data.json())\n      .then((user) =>\n        this.setState({\n          monsters: user,\n          searchText: \"\",\n        })\n      );\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      // setState is an asynchronous call and immidiately accessing\n      // the this.state will not reflect the values\n      // to do so you can use the callback function of\n      // setState to see the updated value\n      searchText: e.target.value,\n    });\n  };\n\n  render() {\n    // Filter the monsters array based on the searchField\n    // Destructuring\n    const { monsters, searchText } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchText.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          onHandleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}